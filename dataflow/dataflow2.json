{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "csv_blob",
						"type": "DatasetReference"
					},
					"name": "employee"
				},
				{
					"dataset": {
						"referenceName": "csv_blob",
						"type": "DatasetReference"
					},
					"name": "department"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "NewSalary"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as short,",
				"          First_Name as string,",
				"          Departmnet_ID as short,",
				"          Gender as string,",
				"          Start_Date as date,",
				"          Last_Login_Time as string,",
				"          Salary as integer,",
				"          Bonus as double,",
				"          Senior_Management as boolean,",
				"          Team as string,",
				"          Company_ID as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employee",
				"source(output(",
				"          DEPARTMENT_ID as short,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> department",
				"employee, department join(Departmnet_ID == DEPARTMENT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(Salary = multiply(Salary,10)) ~> NewSalary",
				"NewSalary select(mapColumn(",
				"          Departmnet_ID,",
				"          Salary",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(Departmnet_ID),",
				"     Salary = sum(Salary)) ~> aggregate1"
			]
		}
	}
}